// Code generated by protoc-gen-go.
// source: users.proto
// DO NOT EDIT!

/*
Package Users is a generated protocol buffer package.

It is generated from these files:
	users.proto

It has these top-level messages:
	User
	UserRequest
	UserReply
*/
package Users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type User struct {
	SocialID  string `protobuf:"bytes,1,opt,name=SocialID,json=socialID" json:"SocialID,omitempty"`
	Email     string `protobuf:"bytes,2,opt,name=Email,json=email" json:"Email,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=FirstName,json=firstName" json:"FirstName,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=Name,json=name" json:"Name,omitempty"`
	LastLogin int64  `protobuf:"varint,5,opt,name=LastLogin,json=lastLogin" json:"LastLogin,omitempty"`
	Balance   int64  `protobuf:"varint,6,opt,name=Balance,json=balance" json:"Balance,omitempty"`
	Referrer  string `protobuf:"bytes,7,opt,name=Referrer,json=referrer" json:"Referrer,omitempty"`
	UserID    string `protobuf:"bytes,8,opt,name=UserID,json=userID" json:"UserID,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetSocialID() string {
	if m != nil {
		return m.SocialID
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetLastLogin() int64 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

func (m *User) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *User) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *User) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

// The request message containing the user's name.
type UserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// The response message containing the greetings
type UserReply struct {
	User *User `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
}

func (m *UserReply) Reset()                    { *m = UserReply{} }
func (m *UserReply) String() string            { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()               {}
func (*UserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "Users.User")
	proto.RegisterType((*UserRequest)(nil), "Users.UserRequest")
	proto.RegisterType((*UserReply)(nil), "Users.UserReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	// Sends a greeting
	UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := grpc.Invoke(ctx, "/Users.Users/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	// Sends a greeting
	UpdateUser(context.Context, *UserRequest) (*UserReply, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users.Users/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Users.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

func init() { proto.RegisterFile("users.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x6b, 0xf3, 0x30,
	0x10, 0x87, 0x5f, 0xbf, 0xf1, 0x3f, 0x9d, 0x97, 0x72, 0x94, 0x22, 0x42, 0xa0, 0xc1, 0x53, 0x86,
	0xe2, 0x21, 0xed, 0xda, 0xa5, 0xa4, 0x85, 0x40, 0xe8, 0xa0, 0x92, 0x0f, 0xa0, 0xa4, 0x97, 0x62,
	0x50, 0x6c, 0x57, 0x92, 0x87, 0x7c, 0xd1, 0x7e, 0x9e, 0xa2, 0x53, 0x02, 0xed, 0xd4, 0xc5, 0xf8,
	0xf9, 0x3d, 0x27, 0x74, 0x77, 0x82, 0x6a, 0x74, 0x64, 0x5d, 0x33, 0xd8, 0xde, 0xf7, 0x98, 0x6d,
	0x03, 0xd4, 0x5f, 0x09, 0xa4, 0xe1, 0x0f, 0xa7, 0x50, 0xbe, 0xf5, 0xfb, 0x56, 0x9b, 0xf5, 0x4a,
	0x26, 0xf3, 0x64, 0x21, 0x54, 0xe9, 0xce, 0x8c, 0xd7, 0x90, 0x3d, 0x1f, 0x75, 0x6b, 0xe4, 0x7f,
	0x16, 0x19, 0x05, 0xc0, 0x19, 0x88, 0x97, 0xd6, 0x3a, 0xff, 0xaa, 0x8f, 0x24, 0x27, 0x6c, 0xc4,
	0xe1, 0x12, 0x20, 0x42, 0xca, 0x22, 0x65, 0x91, 0x76, 0x21, 0x9b, 0x81, 0xd8, 0x68, 0xe7, 0x37,
	0xfd, 0x47, 0xdb, 0xc9, 0x6c, 0x9e, 0x2c, 0x26, 0x4a, 0x98, 0x4b, 0x80, 0x12, 0x8a, 0x27, 0x6d,
	0x74, 0xb7, 0x27, 0x99, 0xb3, 0x2b, 0x76, 0x11, 0x43, 0x6f, 0x8a, 0x0e, 0x64, 0x2d, 0x59, 0x59,
	0xc4, 0xde, 0xec, 0x99, 0xf1, 0x06, 0xf2, 0xd0, 0xff, 0x7a, 0x25, 0x4b, 0x36, 0xf9, 0xc8, 0x54,
	0x37, 0x50, 0x85, 0x5c, 0xd1, 0xe7, 0x48, 0xce, 0xe3, 0x6d, 0x1c, 0x93, 0x47, 0xab, 0x96, 0x55,
	0xc3, 0xd3, 0xf3, 0x57, 0xa5, 0xe1, 0x44, 0x7d, 0x07, 0x22, 0xd6, 0x0f, 0xe6, 0xf4, 0x67, 0xf5,
	0xf2, 0x11, 0xe2, 0xfe, 0xf0, 0x01, 0x60, 0x3b, 0xbc, 0x6b, 0x4f, 0xbc, 0x44, 0xfc, 0x59, 0x19,
	0x6f, 0x9e, 0x5e, 0xfd, 0xca, 0x06, 0x73, 0xaa, 0xff, 0xed, 0x72, 0x7e, 0x83, 0xfb, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xb2, 0x5e, 0xc0, 0x9f, 0x92, 0x01, 0x00, 0x00,
}
